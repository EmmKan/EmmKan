@page "/bingo"
@using Blazored.LocalStorage
@using System.Text.Json
@inject ILocalStorageService LocalStorage
@implements IDisposable

<h3>Hitta en person som:</h3>

@if (!isGridVisible)
{
    <p>Laddar frågor...</p>
}
else
{
    <div class="bingo-grid">
        @for (int i = 0; i < Questions.Count; i++)
        {
            var currentIndex = i;

            <div class="bingo-cell">
                <div class="question-text">@Questions[currentIndex]</div>
                <input type="text"
                    id="@currentIndex"
                    value="@Answers[currentIndex]"
                    @oninput="@((ChangeEventArgs e) => OnAnswerChanged(currentIndex, e.Value?.ToString() ?? string.Empty))"
                    placeholder="Namn:" />
            </div>
        }
    </div>

    <button class="btn btn-primary mt-3" @onclick="SaveAnswers">Spara svar</button>
    <button class="btn btn-secondary mt-3 ms-2" @onclick="LoadAnswers">Ladda svar</button>
}

@code {
    private List<string> Questions = new List<string>
    {
        "Har mer än en katt",
        "Spelar golf på fritiden",
        "Bor i en lägenhet",
        "Gillar bubbel",
        "Kan vissla med fingrarna",
        "Varit i mer än 5 länder",
        "Har en tatuering",
        "Är född i samma månad som du",
        "Har sprungit ett lopp",
        "Älskar att titta på skräckfilm",
        "Har badat utomhus i år",
        "Älskar lakrits",
        "Har bott utomlands",
        "Alltid packar i sista minuten",
        "Har träffat en kändis",
        "Är vänsterhänt",
        "Kan spela ett instrument",
        "Har minst två mellannamn",
        "Kan teckenspråk",
        "Kan jonglera",
        "Bor i radhus",
        "Äger en raggarbil",
        "Har åkt vasaloppet",
        "Har motorcykel-körkort",
        "Har jaktlicens",
        "Har gjort hole-in-one",
        "Har åkt trollstigen",
        "Har ramlat med cykeln",
        "Har bilat i Europa",
        "Har sett Eurovision live"
    };

    private List<string> Answers;
    private bool isGridVisible = false;

    protected override async Task OnInitializedAsync()
    {
        Answers = Enumerable.Repeat(string.Empty, Questions.Count).ToList();

        await LoadAnswers();

        isGridVisible = true;
    }

    private void OnAnswerChanged(int index, string value)
    {
        Console.WriteLine($"Setting Answers[{index}] = {value}");
        if (index >= 0 && index < Answers.Count)
        {
            Answers[index] = value;
        }
    }

    private async Task SaveAnswers()
    {
        try
        {
            await LocalStorage.SetItemAsync("bingo_answers", Answers);
            Console.WriteLine("Svar sparade till LocalStorage.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving answers: {ex.Message}");
        }
    }

    private async Task LoadAnswers()
    {
        try
        {
            var saved = await LocalStorage.GetItemAsync<List<string>>("bingo_answers");
            Answers = (saved != null && saved.Count == Questions.Count)
                ? saved
                : Enumerable.Repeat(string.Empty, Questions.Count).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading answers: {ex.Message}");
            Answers = Enumerable.Repeat(string.Empty, Questions.Count).ToList();
        }
    }

    public void Dispose()
    {
        // fire-and-forget is OK here, Blazor will let it run
        _ = LocalStorage.SetItemAsync("bingo_answers", Answers);
    }
}
